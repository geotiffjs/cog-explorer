{"version":3,"sources":["webpack:///./node_modules/geotiff/src/predictor.js","webpack:///./node_modules/geotiff/src/compression/basedecoder.js","webpack:///./node_modules/geotiff/src/compression/packbits.js"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","fileDirectory","buffer","decoded","this","decodeBlock","predictor","Predictor","isTiled","StripOffsets","block","width","height","bitsPerSample","planarConfiguration","Error","byteLength","Uint8Array","Uint16Array","Uint32Array","applyPredictor","TileWidth","ImageWidth","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration","PackbitsDecoder","dataView","DataView","out","header","getInt8","next","getUint8","j","push"],"mappings":"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","file":"4.app.bundle.js","sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","import BaseDecoder from './basedecoder';\n\nexport default class PackbitsDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    const dataView = new DataView(buffer);\n    const out = [];\n\n    for (let i = 0; i < buffer.byteLength; ++i) {\n      let header = dataView.getInt8(i);\n      if (header < 0) {\n        const next = dataView.getUint8(i + 1);\n        header = -header;\n        for (let j = 0; j <= header; ++j) {\n          out.push(next);\n        }\n        i += 1;\n      } else {\n        for (let j = 0; j <= header; ++j) {\n          out.push(dataView.getUint8(i + j + 1));\n        }\n        i += header + 1;\n      }\n    }\n    return new Uint8Array(out).buffer;\n  }\n}\n"],"sourceRoot":""}